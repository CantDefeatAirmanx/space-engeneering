// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for olezhek28 service
// Â© Olezhek28 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/repository/order"
	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/repository/order/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

type MockOrderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepository) EXPECT() *MockOrderRepository_Expecter {
	return &MockOrderRepository_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) CreateOrder(ctx context.Context, order repository_order_model.Order) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository_order_model.Order) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderRepository_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order repository_order_model.Order
func (_e *MockOrderRepository_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockOrderRepository_CreateOrder_Call {
	return &MockOrderRepository_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockOrderRepository_CreateOrder_Call) Run(run func(ctx context.Context, order repository_order_model.Order)) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository_order_model.Order
		if args[1] != nil {
			arg1 = args[1].(repository_order_model.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) Return(err error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, order repository_order_model.Order) error) *MockOrderRepository_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrder provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) DeleteOrder(ctx context.Context, orderUUID string) error {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_DeleteOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrder'
type MockOrderRepository_DeleteOrder_Call struct {
	*mock.Call
}

// DeleteOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockOrderRepository_Expecter) DeleteOrder(ctx interface{}, orderUUID interface{}) *MockOrderRepository_DeleteOrder_Call {
	return &MockOrderRepository_DeleteOrder_Call{Call: _e.mock.On("DeleteOrder", ctx, orderUUID)}
}

func (_c *MockOrderRepository_DeleteOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *MockOrderRepository_DeleteOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_DeleteOrder_Call) Return(err error) *MockOrderRepository_DeleteOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_DeleteOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string) error) *MockOrderRepository_DeleteOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) GetOrder(ctx context.Context, orderUUID string) (*repository_order_model.Order, error) {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *repository_order_model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*repository_order_model.Order, error)); ok {
		return returnFunc(ctx, orderUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *repository_order_model.Order); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository_order_model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderRepository_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderRepository_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockOrderRepository_Expecter) GetOrder(ctx interface{}, orderUUID interface{}) *MockOrderRepository_GetOrder_Call {
	return &MockOrderRepository_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderUUID)}
}

func (_c *MockOrderRepository_GetOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) Return(order *repository_order_model.Order, err error) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderRepository_GetOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string) (*repository_order_model.Order, error)) *MockOrderRepository_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderFields provides a mock function for the type MockOrderRepository
func (_mock *MockOrderRepository) UpdateOrderFields(ctx context.Context, orderUUID string, update repository_order.UpdateOrderFields) error {
	ret := _mock.Called(ctx, orderUUID, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderFields")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, repository_order.UpdateOrderFields) error); ok {
		r0 = returnFunc(ctx, orderUUID, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderRepository_UpdateOrderFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderFields'
type MockOrderRepository_UpdateOrderFields_Call struct {
	*mock.Call
}

// UpdateOrderFields is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
//   - update repository_order.UpdateOrderFields
func (_e *MockOrderRepository_Expecter) UpdateOrderFields(ctx interface{}, orderUUID interface{}, update interface{}) *MockOrderRepository_UpdateOrderFields_Call {
	return &MockOrderRepository_UpdateOrderFields_Call{Call: _e.mock.On("UpdateOrderFields", ctx, orderUUID, update)}
}

func (_c *MockOrderRepository_UpdateOrderFields_Call) Run(run func(ctx context.Context, orderUUID string, update repository_order.UpdateOrderFields)) *MockOrderRepository_UpdateOrderFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 repository_order.UpdateOrderFields
		if args[2] != nil {
			arg2 = args[2].(repository_order.UpdateOrderFields)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderRepository_UpdateOrderFields_Call) Return(err error) *MockOrderRepository_UpdateOrderFields_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderRepository_UpdateOrderFields_Call) RunAndReturn(run func(ctx context.Context, orderUUID string, update repository_order.UpdateOrderFields) error) *MockOrderRepository_UpdateOrderFields_Call {
	_c.Call.Return(run)
	return _c
}
