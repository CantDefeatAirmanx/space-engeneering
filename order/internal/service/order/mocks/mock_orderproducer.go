// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/shared/pkg/kafka_events/order/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderProducer creates a new instance of MockOrderProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderProducer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockOrderProducer {
	mock := &MockOrderProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderProducer is an autogenerated mock type for the OrderProducer type
type MockOrderProducer struct {
	mock.Mock
}

type MockOrderProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderProducer) EXPECT() *MockOrderProducer_Expecter {
	return &MockOrderProducer_Expecter{mock: &_m.Mock}
}

// ProduceOrderPaid provides a mock function for the type MockOrderProducer
func (_mock *MockOrderProducer) ProduceOrderPaid(ctx context.Context, order kafka_events_order.OrderPaidEvent) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for ProduceOrderPaid")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, kafka_events_order.OrderPaidEvent) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderProducer_ProduceOrderPaid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceOrderPaid'
type MockOrderProducer_ProduceOrderPaid_Call struct {
	*mock.Call
}

// ProduceOrderPaid is a helper method to define mock.On call
//   - ctx context.Context
//   - order kafka_events_order.OrderPaidEvent
func (_e *MockOrderProducer_Expecter) ProduceOrderPaid(ctx, order interface{}) *MockOrderProducer_ProduceOrderPaid_Call {
	return &MockOrderProducer_ProduceOrderPaid_Call{Call: _e.mock.On("ProduceOrderPaid", ctx, order)}
}

func (_c *MockOrderProducer_ProduceOrderPaid_Call) Run(run func(ctx context.Context, order kafka_events_order.OrderPaidEvent)) *MockOrderProducer_ProduceOrderPaid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 kafka_events_order.OrderPaidEvent
		if args[1] != nil {
			arg1 = args[1].(kafka_events_order.OrderPaidEvent)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderProducer_ProduceOrderPaid_Call) Return(err error) *MockOrderProducer_ProduceOrderPaid_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderProducer_ProduceOrderPaid_Call) RunAndReturn(run func(ctx context.Context, order kafka_events_order.OrderPaidEvent) error) *MockOrderProducer_ProduceOrderPaid_Call {
	_c.Call.Return(run)
	return _c
}
