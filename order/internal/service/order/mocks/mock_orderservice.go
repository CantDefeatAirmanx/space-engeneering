// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for olezhek28 service
// Â© Olezhek28 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/model/order"
	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/service/order"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CancelOrder(ctx context.Context, orderUUID string) error {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderService_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type MockOrderService_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockOrderService_Expecter) CancelOrder(ctx interface{}, orderUUID interface{}) *MockOrderService_CancelOrder_Call {
	return &MockOrderService_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderUUID)}
}

func (_c *MockOrderService_CancelOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *MockOrderService_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_CancelOrder_Call) Return(err error) *MockOrderService_CancelOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderService_CancelOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string) error) *MockOrderService_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CreateOrder(ctx context.Context, params service_order.CreateOrderParams) (*service_order.CreateOrderResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *service_order.CreateOrderResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_order.CreateOrderParams) (*service_order.CreateOrderResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_order.CreateOrderParams) *service_order.CreateOrderResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_order.CreateOrderResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_order.CreateOrderParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_order.CreateOrderParams
func (_e *MockOrderService_Expecter) CreateOrder(ctx interface{}, params interface{}) *MockOrderService_CreateOrder_Call {
	return &MockOrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, params)}
}

func (_c *MockOrderService_CreateOrder_Call) Run(run func(ctx context.Context, params service_order.CreateOrderParams)) *MockOrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_order.CreateOrderParams
		if args[1] != nil {
			arg1 = args[1].(service_order.CreateOrderParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) Return(createOrderResult *service_order.CreateOrderResult, err error) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(createOrderResult, err)
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, params service_order.CreateOrderParams) (*service_order.CreateOrderResult, error)) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) DeleteOrder(ctx context.Context, orderUUID string) error {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderService_DeleteOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrder'
type MockOrderService_DeleteOrder_Call struct {
	*mock.Call
}

// DeleteOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockOrderService_Expecter) DeleteOrder(ctx interface{}, orderUUID interface{}) *MockOrderService_DeleteOrder_Call {
	return &MockOrderService_DeleteOrder_Call{Call: _e.mock.On("DeleteOrder", ctx, orderUUID)}
}

func (_c *MockOrderService_DeleteOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *MockOrderService_DeleteOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_DeleteOrder_Call) Return(err error) *MockOrderService_DeleteOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderService_DeleteOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string) error) *MockOrderService_DeleteOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) GetOrder(ctx context.Context, orderUUID string) (*model_order.Order, error) {
	ret := _mock.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *model_order.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model_order.Order, error)); ok {
		return returnFunc(ctx, orderUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model_order.Order); ok {
		r0 = returnFunc(ctx, orderUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model_order.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockOrderService_Expecter) GetOrder(ctx interface{}, orderUUID interface{}) *MockOrderService_GetOrder_Call {
	return &MockOrderService_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderUUID)}
}

func (_c *MockOrderService_GetOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *MockOrderService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_GetOrder_Call) Return(order *model_order.Order, err error) *MockOrderService_GetOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_GetOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string) (*model_order.Order, error)) *MockOrderService_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) PayOrder(ctx context.Context, params service_order.PayOrderParams) (*service_order.PayOrderResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 *service_order.PayOrderResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_order.PayOrderParams) (*service_order.PayOrderResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_order.PayOrderParams) *service_order.PayOrderResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_order.PayOrderResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_order.PayOrderParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type MockOrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_order.PayOrderParams
func (_e *MockOrderService_Expecter) PayOrder(ctx interface{}, params interface{}) *MockOrderService_PayOrder_Call {
	return &MockOrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, params)}
}

func (_c *MockOrderService_PayOrder_Call) Run(run func(ctx context.Context, params service_order.PayOrderParams)) *MockOrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_order.PayOrderParams
		if args[1] != nil {
			arg1 = args[1].(service_order.PayOrderParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_PayOrder_Call) Return(payOrderResult *service_order.PayOrderResult, err error) *MockOrderService_PayOrder_Call {
	_c.Call.Return(payOrderResult, err)
	return _c
}

func (_c *MockOrderService_PayOrder_Call) RunAndReturn(run func(ctx context.Context, params service_order.PayOrderParams) (*service_order.PayOrderResult, error)) *MockOrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) UpdateOrder(ctx context.Context, orderUUID string, update service_order.UpdateOrderFields) error {
	ret := _mock.Called(ctx, orderUUID, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, service_order.UpdateOrderFields) error); ok {
		r0 = returnFunc(ctx, orderUUID, update)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderService_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockOrderService_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
//   - update service_order.UpdateOrderFields
func (_e *MockOrderService_Expecter) UpdateOrder(ctx interface{}, orderUUID interface{}, update interface{}) *MockOrderService_UpdateOrder_Call {
	return &MockOrderService_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, orderUUID, update)}
}

func (_c *MockOrderService_UpdateOrder_Call) Run(run func(ctx context.Context, orderUUID string, update service_order.UpdateOrderFields)) *MockOrderService_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 service_order.UpdateOrderFields
		if args[2] != nil {
			arg2 = args[2].(service_order.UpdateOrderFields)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOrderService_UpdateOrder_Call) Return(err error) *MockOrderService_UpdateOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderService_UpdateOrder_Call) RunAndReturn(run func(ctx context.Context, orderUUID string, update service_order.UpdateOrderFields) error) *MockOrderService_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}
