// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/client/inventory/v1"
	"github.com/CantDefeatAirmanx/space-engeneering/order/internal/model/part"
	"github.com/CantDefeatAirmanx/space-engeneering/shared/pkg/proto/inventory/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInventoryV1Client creates a new instance of MockInventoryV1Client. It also registers a testing interface on the mock and a cleanup function to assert the test_data expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryV1Client(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockInventoryV1Client {
	mock := &MockInventoryV1Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInventoryV1Client is an autogenerated mock type for the InventoryV1Client type
type MockInventoryV1Client struct {
	mock.Mock
}

type MockInventoryV1Client_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryV1Client) EXPECT() *MockInventoryV1Client_Expecter {
	return &MockInventoryV1Client_Expecter{mock: &_m.Mock}
}

// GetPart provides a mock function for the type MockInventoryV1Client
func (_mock *MockInventoryV1Client) GetPart(ctx context.Context, params *inventory_v1.GetPartRequest) (*model_part.Part, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPart")
	}

	var r0 *model_part.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *inventory_v1.GetPartRequest) (*model_part.Part, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *inventory_v1.GetPartRequest) *model_part.Part); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model_part.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *inventory_v1.GetPartRequest) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryV1Client_GetPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPart'
type MockInventoryV1Client_GetPart_Call struct {
	*mock.Call
}

// GetPart is a helper method to define mock.On call
//   - ctx context.Context
//   - params *inventory_v1.GetPartRequest
func (_e *MockInventoryV1Client_Expecter) GetPart(ctx, params interface{}) *MockInventoryV1Client_GetPart_Call {
	return &MockInventoryV1Client_GetPart_Call{Call: _e.mock.On("GetPart", ctx, params)}
}

func (_c *MockInventoryV1Client_GetPart_Call) Run(run func(ctx context.Context, params *inventory_v1.GetPartRequest)) *MockInventoryV1Client_GetPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *inventory_v1.GetPartRequest
		if args[1] != nil {
			arg1 = args[1].(*inventory_v1.GetPartRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryV1Client_GetPart_Call) Return(part *model_part.Part, err error) *MockInventoryV1Client_GetPart_Call {
	_c.Call.Return(part, err)
	return _c
}

func (_c *MockInventoryV1Client_GetPart_Call) RunAndReturn(run func(ctx context.Context, params *inventory_v1.GetPartRequest) (*model_part.Part, error)) *MockInventoryV1Client_GetPart_Call {
	_c.Call.Return(run)
	return _c
}

// ListParts provides a mock function for the type MockInventoryV1Client
func (_mock *MockInventoryV1Client) ListParts(ctx context.Context, params client_inventory_v1.ListPartsParams) ([]*model_part.Part, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListParts")
	}

	var r0 []*model_part.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client_inventory_v1.ListPartsParams) ([]*model_part.Part, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, client_inventory_v1.ListPartsParams) []*model_part.Part); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model_part.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, client_inventory_v1.ListPartsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryV1Client_ListParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListParts'
type MockInventoryV1Client_ListParts_Call struct {
	*mock.Call
}

// ListParts is a helper method to define mock.On call
//   - ctx context.Context
//   - params client_inventory_v1.ListPartsParams
func (_e *MockInventoryV1Client_Expecter) ListParts(ctx, params interface{}) *MockInventoryV1Client_ListParts_Call {
	return &MockInventoryV1Client_ListParts_Call{Call: _e.mock.On("ListParts", ctx, params)}
}

func (_c *MockInventoryV1Client_ListParts_Call) Run(run func(ctx context.Context, params client_inventory_v1.ListPartsParams)) *MockInventoryV1Client_ListParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client_inventory_v1.ListPartsParams
		if args[1] != nil {
			arg1 = args[1].(client_inventory_v1.ListPartsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryV1Client_ListParts_Call) Return(parts []*model_part.Part, err error) *MockInventoryV1Client_ListParts_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockInventoryV1Client_ListParts_Call) RunAndReturn(run func(ctx context.Context, params client_inventory_v1.ListPartsParams) ([]*model_part.Part, error)) *MockInventoryV1Client_ListParts_Call {
	_c.Call.Return(run)
	return _c
}
