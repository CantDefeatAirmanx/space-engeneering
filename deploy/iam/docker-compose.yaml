services: # Раздел, в котором описываются все контейнеры, необходимые для IAM-сервиса

  postgres-iam: # Сервис с PostgreSQL, используемый IAM-сервисом для хранения данных пользователей
    image: postgres:17 # Используем официальный образ PostgreSQL 17 — он лёгкий и быстрый
    container_name: postgres-iam # Устанавливаем читаемое имя контейнера — удобно при отладке и работе в CLI

    env_file:
      - ./.env
    environment:
        - POSTGRES_USER=${postgres__user}
        - POSTGRES_PASSWORD=${postgres__password}
        - POSTGRES_DB=${postgres__dbName}

    volumes:
      - postgres_iam_data:/var/lib/postgresql/data
      # Подключаем именованный том — он будет хранить данные БД вне контейнера
      # Это позволяет не потерять данные при перезапуске контейнера

    ports:
      - "5434:5432"
      # Пробрасываем внутренний порт PostgreSQL (5432) на порт хоста, указанный в переменной EXTERNAL_POSTGRES_PORT
      # Это нужно, чтобы можно было подключиться к базе извне, например, из DBeaver или другого сервиса

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${postgres__user} -d ${postgres__dbName}" ]
      # Проверяем готовность базы с помощью встроенной команды pg_isready, используя логин из .env
      interval: 10s # Периодичность проверок — каждые 10 секунд
      timeout: 5s # Таймаут на выполнение одной проверки
      retries: 5 # Сервис будет считаться "неработающим", если 5 проверок подряд неуспешны

    restart: unless-stopped
    # Автоматически перезапускаем контейнер при сбоях, но не при ручной остановке

    networks:
      - microservices-net
      # Подключаем контейнер к общей сети, в которой живут все сервисы микросервисной архитектуры

  redis-iam: # Redis — кэш и хранилище сессий для IAM
    image: redis:7.2.5-alpine3.20 # Лёгкий образ Redis последней стабильной версии
    container_name: redis-iam # Явное имя контейнера Redis

    env_file:
      - ./.env
    environment:
      - REDIS_PASSWORD=${redis__password}
      - EXTERNAL_REDIS_PORT=${redis__externalPort}

    command: redis-server --requirepass ${redis__password} --appendonly yes
    # --requirepass: устанавливаем пароль для подключения к Redis
    # --appendonly yes: включаем AOF (Append Only File) для персистентности данных

    volumes:
      - redis_iam_data:/data
      # Том для хранения данных Redis (AOF-файлы, снапшоты)
      # Данные сохраняются между перезапусками контейнера

    ports:
      - "${redis__externalPort}:6379"
      # Пробрасываем внутренний порт Redis на внешний, указанный в .env (например, 6380)
      # Это позволяет IAM-сервису обращаться к Redis по порту хоста

    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${redis__password}", "ping" ]
      # Проверка с авторизацией: передаём пароль через флаг -a
      interval: 10s # Проверяем Redis каждые 10 секунд
      timeout: 5s # Ждём ответа до 5 секунд
      retries: 5 # После 5 неудачных попыток контейнер считается unhealthy

    restart: unless-stopped
    # Перезапуск Redis при сбое, если контейнер не остановлен вручную

    networks:
      - microservices-net
      # Redis подключается к той же общей сети, что и PostgreSQL, и остальные сервисы


volumes: # Раздел томов — Docker сам создаст и будет управлять этим хранилищем данных
  postgres_iam_data:
  # Том для хранения данных PostgreSQL (таблицы, индексы и т.д.)
  # Он сохраняется между перезапусками контейнера

  redis_iam_data:
  # Том для хранения данных Redis (AOF-файлы, RDB-снапшоты)
  # Данные кэша и сессий сохраняются между перезапусками

networks: # Определение используемой сети
  microservices-net:
    external: true
    # Мы не создаём новую сеть, а подключаемся к внешней, общей для всех микросервисов
    # Её должен создать docker-compose.yml или вручную: docker network create microservices-net
