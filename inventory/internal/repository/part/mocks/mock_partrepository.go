// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/inventory/internal/repository/part"
	"github.com/CantDefeatAirmanx/space-engeneering/inventory/internal/repository/part/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPartRepository creates a new instance of MockPartRepository. It also registers a testing interface on the mock and a cleanup function to assert the test_data expectations.
// The first argument is typically a *testing.T value.
func NewMockPartRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockPartRepository {
	mock := &MockPartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPartRepository is an autogenerated mock type for the PartRepository type
type MockPartRepository struct {
	mock.Mock
}

type MockPartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPartRepository) EXPECT() *MockPartRepository_Expecter {
	return &MockPartRepository_Expecter{mock: &_m.Mock}
}

// GetPart provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) GetPart(ctx context.Context, uuid string) (*repository_model_part.Part, error) {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPart")
	}

	var r0 *repository_model_part.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*repository_model_part.Part, error)); ok {
		return returnFunc(ctx, uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *repository_model_part.Part); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository_model_part.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_GetPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPart'
type MockPartRepository_GetPart_Call struct {
	*mock.Call
}

// GetPart is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPartRepository_Expecter) GetPart(ctx, uuid interface{}) *MockPartRepository_GetPart_Call {
	return &MockPartRepository_GetPart_Call{Call: _e.mock.On("GetPart", ctx, uuid)}
}

func (_c *MockPartRepository_GetPart_Call) Run(run func(ctx context.Context, uuid string)) *MockPartRepository_GetPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_GetPart_Call) Return(part *repository_model_part.Part, err error) *MockPartRepository_GetPart_Call {
	_c.Call.Return(part, err)
	return _c
}

func (_c *MockPartRepository_GetPart_Call) RunAndReturn(run func(ctx context.Context, uuid string) (*repository_model_part.Part, error)) *MockPartRepository_GetPart_Call {
	_c.Call.Return(run)
	return _c
}

// GetParts provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) GetParts(ctx context.Context, filter repository_part.Filter) ([]*repository_model_part.Part, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetParts")
	}

	var r0 []*repository_model_part.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository_part.Filter) ([]*repository_model_part.Part, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, repository_part.Filter) []*repository_model_part.Part); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository_model_part.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, repository_part.Filter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_GetParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParts'
type MockPartRepository_GetParts_Call struct {
	*mock.Call
}

// GetParts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter repository_part.Filter
func (_e *MockPartRepository_Expecter) GetParts(ctx, filter interface{}) *MockPartRepository_GetParts_Call {
	return &MockPartRepository_GetParts_Call{Call: _e.mock.On("GetParts", ctx, filter)}
}

func (_c *MockPartRepository_GetParts_Call) Run(run func(ctx context.Context, filter repository_part.Filter)) *MockPartRepository_GetParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 repository_part.Filter
		if args[1] != nil {
			arg1 = args[1].(repository_part.Filter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_GetParts_Call) Return(parts []*repository_model_part.Part, err error) *MockPartRepository_GetParts_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockPartRepository_GetParts_Call) RunAndReturn(run func(ctx context.Context, filter repository_part.Filter) ([]*repository_model_part.Part, error)) *MockPartRepository_GetParts_Call {
	_c.Call.Return(run)
	return _c
}

// SetPart provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) SetPart(ctx context.Context, part *repository_model_part.Part) error {
	ret := _mock.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for SetPart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *repository_model_part.Part) error); ok {
		r0 = returnFunc(ctx, part)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPartRepository_SetPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPart'
type MockPartRepository_SetPart_Call struct {
	*mock.Call
}

// SetPart is a helper method to define mock.On call
//   - ctx context.Context
//   - part *repository_model_part.Part
func (_e *MockPartRepository_Expecter) SetPart(ctx, part interface{}) *MockPartRepository_SetPart_Call {
	return &MockPartRepository_SetPart_Call{Call: _e.mock.On("SetPart", ctx, part)}
}

func (_c *MockPartRepository_SetPart_Call) Run(run func(ctx context.Context, part *repository_model_part.Part)) *MockPartRepository_SetPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *repository_model_part.Part
		if args[1] != nil {
			arg1 = args[1].(*repository_model_part.Part)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_SetPart_Call) Return(err error) *MockPartRepository_SetPart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPartRepository_SetPart_Call) RunAndReturn(run func(ctx context.Context, part *repository_model_part.Part) error) *MockPartRepository_SetPart_Call {
	_c.Call.Return(run)
	return _c
}
