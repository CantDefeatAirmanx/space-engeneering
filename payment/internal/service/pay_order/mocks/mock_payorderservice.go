// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/payment/internal/service/pay_order"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPayOrderService creates a new instance of MockPayOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayOrderService {
	mock := &MockPayOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPayOrderService is an autogenerated mock type for the PayOrderService type
type MockPayOrderService struct {
	mock.Mock
}

type MockPayOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayOrderService) EXPECT() *MockPayOrderService_Expecter {
	return &MockPayOrderService_Expecter{mock: &_m.Mock}
}

// PayOrder provides a mock function for the type MockPayOrderService
func (_mock *MockPayOrderService) PayOrder(ctx context.Context, params service_pay_order.PayOrderMethodParams) (*service_pay_order.PayOrderMethodReturn, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 *service_pay_order.PayOrderMethodReturn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_pay_order.PayOrderMethodParams) (*service_pay_order.PayOrderMethodReturn, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_pay_order.PayOrderMethodParams) *service_pay_order.PayOrderMethodReturn); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_pay_order.PayOrderMethodReturn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_pay_order.PayOrderMethodParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPayOrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type MockPayOrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_pay_order.PayOrderMethodParams
func (_e *MockPayOrderService_Expecter) PayOrder(ctx interface{}, params interface{}) *MockPayOrderService_PayOrder_Call {
	return &MockPayOrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, params)}
}

func (_c *MockPayOrderService_PayOrder_Call) Run(run func(ctx context.Context, params service_pay_order.PayOrderMethodParams)) *MockPayOrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_pay_order.PayOrderMethodParams
		if args[1] != nil {
			arg1 = args[1].(service_pay_order.PayOrderMethodParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPayOrderService_PayOrder_Call) Return(payOrderMethodReturn *service_pay_order.PayOrderMethodReturn, err error) *MockPayOrderService_PayOrder_Call {
	_c.Call.Return(payOrderMethodReturn, err)
	return _c
}

func (_c *MockPayOrderService_PayOrder_Call) RunAndReturn(run func(ctx context.Context, params service_pay_order.PayOrderMethodParams) (*service_pay_order.PayOrderMethodReturn, error)) *MockPayOrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}
