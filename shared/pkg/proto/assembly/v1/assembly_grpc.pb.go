// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: assembly/v1/assembly.proto

package assembly_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssemblyService_CreateAssembly_FullMethodName    = "/assembly.v1.AssemblyService/CreateAssembly"
	AssemblyService_AssemblyCompleted_FullMethodName = "/assembly.v1.AssemblyService/AssemblyCompleted"
	AssemblyService_AssemblyStarted_FullMethodName   = "/assembly.v1.AssemblyService/AssemblyStarted"
	AssemblyService_GetAssemblyInfo_FullMethodName   = "/assembly.v1.AssemblyService/GetAssemblyInfo"
)

// AssemblyServiceClient is the client API for AssemblyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AssemblyService предоставляет API для работы с сборкой корабля
type AssemblyServiceClient interface {
	CreateAssembly(ctx context.Context, in *CreateAssemblyRequest, opts ...grpc.CallOption) (*CreateAssemblyResponse, error)
	AssemblyCompleted(ctx context.Context, in *AssemblyCompletedRequest, opts ...grpc.CallOption) (*AssemblyCompletedResponse, error)
	AssemblyStarted(ctx context.Context, in *AssemblyStartedRequest, opts ...grpc.CallOption) (*AssemblyStartedResponse, error)
	GetAssemblyInfo(ctx context.Context, in *GetAssemblyInfoRequest, opts ...grpc.CallOption) (*GetAssemblyInfoResponse, error)
}

type assemblyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssemblyServiceClient(cc grpc.ClientConnInterface) AssemblyServiceClient {
	return &assemblyServiceClient{cc}
}

func (c *assemblyServiceClient) CreateAssembly(ctx context.Context, in *CreateAssemblyRequest, opts ...grpc.CallOption) (*CreateAssemblyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAssemblyResponse)
	err := c.cc.Invoke(ctx, AssemblyService_CreateAssembly_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) AssemblyCompleted(ctx context.Context, in *AssemblyCompletedRequest, opts ...grpc.CallOption) (*AssemblyCompletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssemblyCompletedResponse)
	err := c.cc.Invoke(ctx, AssemblyService_AssemblyCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) AssemblyStarted(ctx context.Context, in *AssemblyStartedRequest, opts ...grpc.CallOption) (*AssemblyStartedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssemblyStartedResponse)
	err := c.cc.Invoke(ctx, AssemblyService_AssemblyStarted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblyServiceClient) GetAssemblyInfo(ctx context.Context, in *GetAssemblyInfoRequest, opts ...grpc.CallOption) (*GetAssemblyInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssemblyInfoResponse)
	err := c.cc.Invoke(ctx, AssemblyService_GetAssemblyInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssemblyServiceServer is the server API for AssemblyService service.
// All implementations must embed UnimplementedAssemblyServiceServer
// for forward compatibility.
//
// AssemblyService предоставляет API для работы с сборкой корабля
type AssemblyServiceServer interface {
	CreateAssembly(context.Context, *CreateAssemblyRequest) (*CreateAssemblyResponse, error)
	AssemblyCompleted(context.Context, *AssemblyCompletedRequest) (*AssemblyCompletedResponse, error)
	AssemblyStarted(context.Context, *AssemblyStartedRequest) (*AssemblyStartedResponse, error)
	GetAssemblyInfo(context.Context, *GetAssemblyInfoRequest) (*GetAssemblyInfoResponse, error)
	mustEmbedUnimplementedAssemblyServiceServer()
}

// UnimplementedAssemblyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssemblyServiceServer struct{}

func (UnimplementedAssemblyServiceServer) CreateAssembly(context.Context, *CreateAssemblyRequest) (*CreateAssemblyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssembly not implemented")
}
func (UnimplementedAssemblyServiceServer) AssemblyCompleted(context.Context, *AssemblyCompletedRequest) (*AssemblyCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssemblyCompleted not implemented")
}
func (UnimplementedAssemblyServiceServer) AssemblyStarted(context.Context, *AssemblyStartedRequest) (*AssemblyStartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssemblyStarted not implemented")
}
func (UnimplementedAssemblyServiceServer) GetAssemblyInfo(context.Context, *GetAssemblyInfoRequest) (*GetAssemblyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssemblyInfo not implemented")
}
func (UnimplementedAssemblyServiceServer) mustEmbedUnimplementedAssemblyServiceServer() {}
func (UnimplementedAssemblyServiceServer) testEmbeddedByValue()                         {}

// UnsafeAssemblyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssemblyServiceServer will
// result in compilation errors.
type UnsafeAssemblyServiceServer interface {
	mustEmbedUnimplementedAssemblyServiceServer()
}

func RegisterAssemblyServiceServer(s grpc.ServiceRegistrar, srv AssemblyServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssemblyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssemblyService_ServiceDesc, srv)
}

func _AssemblyService_CreateAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssemblyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).CreateAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssemblyService_CreateAssembly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).CreateAssembly(ctx, req.(*CreateAssemblyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_AssemblyCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).AssemblyCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssemblyService_AssemblyCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).AssemblyCompleted(ctx, req.(*AssemblyCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_AssemblyStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).AssemblyStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssemblyService_AssemblyStarted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).AssemblyStarted(ctx, req.(*AssemblyStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssemblyService_GetAssemblyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssemblyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblyServiceServer).GetAssemblyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssemblyService_GetAssemblyInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblyServiceServer).GetAssemblyInfo(ctx, req.(*GetAssemblyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssemblyService_ServiceDesc is the grpc.ServiceDesc for AssemblyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssemblyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assembly.v1.AssemblyService",
	HandlerType: (*AssemblyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssembly",
			Handler:    _AssemblyService_CreateAssembly_Handler,
		},
		{
			MethodName: "AssemblyCompleted",
			Handler:    _AssemblyService_AssemblyCompleted_Handler,
		},
		{
			MethodName: "AssemblyStarted",
			Handler:    _AssemblyService_AssemblyStarted_Handler,
		},
		{
			MethodName: "GetAssemblyInfo",
			Handler:    _AssemblyService_GetAssemblyInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assembly/v1/assembly.proto",
}
