// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: assembly/v1/assembly.proto

package assembly_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAssemblyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssemblyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssemblyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssemblyRequestMultiError, or nil if none found.
func (m *CreateAssemblyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssemblyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderUuid

	if len(errors) > 0 {
		return CreateAssemblyRequestMultiError(errors)
	}

	return nil
}

// CreateAssemblyRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAssemblyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAssemblyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssemblyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssemblyRequestMultiError) AllErrors() []error { return m }

// CreateAssemblyRequestValidationError is the validation error returned by
// CreateAssemblyRequest.Validate if the designated constraints aren't met.
type CreateAssemblyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssemblyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssemblyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssemblyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssemblyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssemblyRequestValidationError) ErrorName() string {
	return "CreateAssemblyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssemblyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssemblyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssemblyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssemblyRequestValidationError{}

// Validate checks the field values on CreateAssemblyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssemblyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssemblyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssemblyResponseMultiError, or nil if none found.
func (m *CreateAssemblyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssemblyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssemblyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssemblyResponseValidationError{
					field:  "AssemblyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssemblyResponseValidationError{
					field:  "AssemblyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssemblyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssemblyResponseValidationError{
				field:  "AssemblyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssemblyResponseMultiError(errors)
	}

	return nil
}

// CreateAssemblyResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAssemblyResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAssemblyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssemblyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssemblyResponseMultiError) AllErrors() []error { return m }

// CreateAssemblyResponseValidationError is the validation error returned by
// CreateAssemblyResponse.Validate if the designated constraints aren't met.
type CreateAssemblyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssemblyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssemblyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssemblyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssemblyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssemblyResponseValidationError) ErrorName() string {
	return "CreateAssemblyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssemblyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssemblyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssemblyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssemblyResponseValidationError{}

// Validate checks the field values on AssemblyCompletedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssemblyCompletedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssemblyCompletedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssemblyCompletedRequestMultiError, or nil if none found.
func (m *AssemblyCompletedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssemblyCompletedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderUuid

	// no validation rules for AssemblyUuid

	if len(errors) > 0 {
		return AssemblyCompletedRequestMultiError(errors)
	}

	return nil
}

// AssemblyCompletedRequestMultiError is an error wrapping multiple validation
// errors returned by AssemblyCompletedRequest.ValidateAll() if the designated
// constraints aren't met.
type AssemblyCompletedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssemblyCompletedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssemblyCompletedRequestMultiError) AllErrors() []error { return m }

// AssemblyCompletedRequestValidationError is the validation error returned by
// AssemblyCompletedRequest.Validate if the designated constraints aren't met.
type AssemblyCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssemblyCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssemblyCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssemblyCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssemblyCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssemblyCompletedRequestValidationError) ErrorName() string {
	return "AssemblyCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssemblyCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssemblyCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssemblyCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssemblyCompletedRequestValidationError{}

// Validate checks the field values on AssemblyCompletedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssemblyCompletedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssemblyCompletedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssemblyCompletedResponseMultiError, or nil if none found.
func (m *AssemblyCompletedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssemblyCompletedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssemblyUuid

	if len(errors) > 0 {
		return AssemblyCompletedResponseMultiError(errors)
	}

	return nil
}

// AssemblyCompletedResponseMultiError is an error wrapping multiple validation
// errors returned by AssemblyCompletedResponse.ValidateAll() if the
// designated constraints aren't met.
type AssemblyCompletedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssemblyCompletedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssemblyCompletedResponseMultiError) AllErrors() []error { return m }

// AssemblyCompletedResponseValidationError is the validation error returned by
// AssemblyCompletedResponse.Validate if the designated constraints aren't met.
type AssemblyCompletedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssemblyCompletedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssemblyCompletedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssemblyCompletedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssemblyCompletedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssemblyCompletedResponseValidationError) ErrorName() string {
	return "AssemblyCompletedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssemblyCompletedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssemblyCompletedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssemblyCompletedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssemblyCompletedResponseValidationError{}

// Validate checks the field values on AssemblyStartedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssemblyStartedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssemblyStartedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssemblyStartedRequestMultiError, or nil if none found.
func (m *AssemblyStartedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssemblyStartedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderUuid

	// no validation rules for AssemblyUuid

	if len(errors) > 0 {
		return AssemblyStartedRequestMultiError(errors)
	}

	return nil
}

// AssemblyStartedRequestMultiError is an error wrapping multiple validation
// errors returned by AssemblyStartedRequest.ValidateAll() if the designated
// constraints aren't met.
type AssemblyStartedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssemblyStartedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssemblyStartedRequestMultiError) AllErrors() []error { return m }

// AssemblyStartedRequestValidationError is the validation error returned by
// AssemblyStartedRequest.Validate if the designated constraints aren't met.
type AssemblyStartedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssemblyStartedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssemblyStartedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssemblyStartedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssemblyStartedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssemblyStartedRequestValidationError) ErrorName() string {
	return "AssemblyStartedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssemblyStartedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssemblyStartedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssemblyStartedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssemblyStartedRequestValidationError{}

// Validate checks the field values on AssemblyStartedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssemblyStartedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssemblyStartedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssemblyStartedResponseMultiError, or nil if none found.
func (m *AssemblyStartedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssemblyStartedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssemblyUuid

	if len(errors) > 0 {
		return AssemblyStartedResponseMultiError(errors)
	}

	return nil
}

// AssemblyStartedResponseMultiError is an error wrapping multiple validation
// errors returned by AssemblyStartedResponse.ValidateAll() if the designated
// constraints aren't met.
type AssemblyStartedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssemblyStartedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssemblyStartedResponseMultiError) AllErrors() []error { return m }

// AssemblyStartedResponseValidationError is the validation error returned by
// AssemblyStartedResponse.Validate if the designated constraints aren't met.
type AssemblyStartedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssemblyStartedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssemblyStartedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssemblyStartedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssemblyStartedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssemblyStartedResponseValidationError) ErrorName() string {
	return "AssemblyStartedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssemblyStartedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssemblyStartedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssemblyStartedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssemblyStartedResponseValidationError{}

// Validate checks the field values on GetAssemblyInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssemblyInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssemblyInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssemblyInfoRequestMultiError, or nil if none found.
func (m *GetAssemblyInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssemblyInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssemblyUuid

	// no validation rules for OrderUuid

	if len(errors) > 0 {
		return GetAssemblyInfoRequestMultiError(errors)
	}

	return nil
}

// GetAssemblyInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssemblyInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAssemblyInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssemblyInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssemblyInfoRequestMultiError) AllErrors() []error { return m }

// GetAssemblyInfoRequestValidationError is the validation error returned by
// GetAssemblyInfoRequest.Validate if the designated constraints aren't met.
type GetAssemblyInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssemblyInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssemblyInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssemblyInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssemblyInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssemblyInfoRequestValidationError) ErrorName() string {
	return "GetAssemblyInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssemblyInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssemblyInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssemblyInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssemblyInfoRequestValidationError{}

// Validate checks the field values on GetAssemblyInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssemblyInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssemblyInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssemblyInfoResponseMultiError, or nil if none found.
func (m *GetAssemblyInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssemblyInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssemblyInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAssemblyInfoResponseValidationError{
					field:  "AssemblyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAssemblyInfoResponseValidationError{
					field:  "AssemblyInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssemblyInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssemblyInfoResponseValidationError{
				field:  "AssemblyInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAssemblyInfoResponseMultiError(errors)
	}

	return nil
}

// GetAssemblyInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAssemblyInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAssemblyInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssemblyInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssemblyInfoResponseMultiError) AllErrors() []error { return m }

// GetAssemblyInfoResponseValidationError is the validation error returned by
// GetAssemblyInfoResponse.Validate if the designated constraints aren't met.
type GetAssemblyInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssemblyInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssemblyInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssemblyInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssemblyInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssemblyInfoResponseValidationError) ErrorName() string {
	return "GetAssemblyInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssemblyInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssemblyInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssemblyInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssemblyInfoResponseValidationError{}

// Validate checks the field values on AssemblyInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssemblyInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssemblyInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssemblyInfoMultiError, or
// nil if none found.
func (m *AssemblyInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AssemblyInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssemblyUuid

	// no validation rules for OrderUuid

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssemblyInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssemblyInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssemblyInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssemblyInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssemblyInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssemblyInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssemblyInfoMultiError(errors)
	}

	return nil
}

// AssemblyInfoMultiError is an error wrapping multiple validation errors
// returned by AssemblyInfo.ValidateAll() if the designated constraints aren't met.
type AssemblyInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssemblyInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssemblyInfoMultiError) AllErrors() []error { return m }

// AssemblyInfoValidationError is the validation error returned by
// AssemblyInfo.Validate if the designated constraints aren't met.
type AssemblyInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssemblyInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssemblyInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssemblyInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssemblyInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssemblyInfoValidationError) ErrorName() string { return "AssemblyInfoValidationError" }

// Error satisfies the builtin error interface
func (e AssemblyInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssemblyInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssemblyInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssemblyInfoValidationError{}
