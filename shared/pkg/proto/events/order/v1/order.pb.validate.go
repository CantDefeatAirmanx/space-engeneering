// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: events/order/v1/order.proto

package order_events_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common_v1 "github.com/CantDefeatAirmanx/space-engeneering/shared/pkg/proto/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common_v1.PaymentMethod(0)
)

// Validate checks the field values on OrderEventEnvelope with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderEventEnvelope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderEventEnvelope with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderEventEnvelopeMultiError, or nil if none found.
func (m *OrderEventEnvelope) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderEventEnvelope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventType

	// no validation rules for EventUuid

	switch v := m.Event.(type) {
	case *OrderEventEnvelope_OrderPaid:
		if v == nil {
			err := OrderEventEnvelopeValidationError{
				field:  "Event",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrderPaid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderEventEnvelopeValidationError{
						field:  "OrderPaid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderEventEnvelopeValidationError{
						field:  "OrderPaid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrderPaid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderEventEnvelopeValidationError{
					field:  "OrderPaid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OrderEventEnvelopeMultiError(errors)
	}

	return nil
}

// OrderEventEnvelopeMultiError is an error wrapping multiple validation errors
// returned by OrderEventEnvelope.ValidateAll() if the designated constraints
// aren't met.
type OrderEventEnvelopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderEventEnvelopeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderEventEnvelopeMultiError) AllErrors() []error { return m }

// OrderEventEnvelopeValidationError is the validation error returned by
// OrderEventEnvelope.Validate if the designated constraints aren't met.
type OrderEventEnvelopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderEventEnvelopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderEventEnvelopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderEventEnvelopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderEventEnvelopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderEventEnvelopeValidationError) ErrorName() string {
	return "OrderEventEnvelopeValidationError"
}

// Error satisfies the builtin error interface
func (e OrderEventEnvelopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderEventEnvelope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderEventEnvelopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderEventEnvelopeValidationError{}

// Validate checks the field values on OrderPaidEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderPaidEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderPaidEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderPaidEventMultiError,
// or nil if none found.
func (m *OrderPaidEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderPaidEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventUuid

	// no validation rules for OrderUuid

	// no validation rules for UserUuid

	// no validation rules for TransactionUuid

	// no validation rules for PaymentMethod

	if len(errors) > 0 {
		return OrderPaidEventMultiError(errors)
	}

	return nil
}

// OrderPaidEventMultiError is an error wrapping multiple validation errors
// returned by OrderPaidEvent.ValidateAll() if the designated constraints
// aren't met.
type OrderPaidEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderPaidEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderPaidEventMultiError) AllErrors() []error { return m }

// OrderPaidEventValidationError is the validation error returned by
// OrderPaidEvent.Validate if the designated constraints aren't met.
type OrderPaidEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderPaidEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderPaidEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderPaidEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderPaidEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderPaidEventValidationError) ErrorName() string { return "OrderPaidEventValidationError" }

// Error satisfies the builtin error interface
func (e OrderPaidEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderPaidEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderPaidEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderPaidEventValidationError{}
