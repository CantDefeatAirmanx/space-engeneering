syntax = "proto3";

package assembly.v1;

option go_package = "github.com/CantDefeatAirmanx/space-engeneering/shared/proto/assembly/v1;assembly_v1";

import "google/protobuf/timestamp.proto";

// AssemblyService предоставляет API для работы с сборкой корабля
service AssemblyService {
    rpc CreateAssembly(CreateAssemblyRequest) returns (CreateAssemblyResponse);
    rpc AssemblyCompleted(AssemblyCompletedRequest) returns (AssemblyCompletedResponse);
    rpc AssemblyStarted(AssemblyStartedRequest) returns (AssemblyStartedResponse);
    rpc GetAssemblyInfo(GetAssemblyInfoRequest) returns (GetAssemblyInfoResponse);
}

// CreateAssemblyRequest описывает запрос на создание сборки корабля
message CreateAssemblyRequest {
    // order_uuid идентификатор заказа
    string order_uuid = 1;
}

// CreateAssemblyResponse описывает ответ на запрос на создание сборки корабля
message CreateAssemblyResponse {
    // assembly_uuid идентификатор сборки
    AssemblyInfo assembly_info = 1;
}

// CreateAssemblyResponse описывает ответ на запрос на создание сборки корабля

// AssemblyCompletedRequest описывает запрос на завершение сборки корабля
message AssemblyCompletedRequest {
    // order_uuid идентификатор заказа
    string order_uuid = 1;
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 2;
}

// AssemblyCompletedResponse описывает ответ на запрос на завершение сборки корабля
message AssemblyCompletedResponse {
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 1;
}

// AssemblyStartedRequest описывает запрос на начал сборки корабля
message AssemblyStartedRequest {
    // order_uuid идентификатор заказа
    string order_uuid = 1;
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 2;
}

// AssemblyStartedResponse описывает ответ на запрос на начал сборки корабля
message AssemblyStartedResponse {
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 1;
}

// GetAssemblyInfoRequest описывает запрос на получение информации о сборке корабля
message GetAssemblyInfoRequest {
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 1;
    // order_uuid идентификатор заказа
    string order_uuid = 2;
}

// GetAssemblyInfoResponse описывает ответ на запрос на получение информации о сборке корабля
message GetAssemblyInfoResponse {
    // assembly_info информация о сборке корабля
    AssemblyInfo assembly_info = 1;
}

// AssemblyInfo описывает информацию о сборке корабля
message AssemblyInfo {
    // assembly_uuid идентификатор сборки
    string assembly_uuid = 1;
    // order_uuid идентификатор заказа
    string order_uuid = 2;
    // status статус сборки
    AssemblyStatus status = 3;

    // created_at дата создания
    google.protobuf.Timestamp created_at = 4;
    // updated_at дата обновления
    google.protobuf.Timestamp updated_at = 5;
}

// AssemblyStatus статус сборки
enum AssemblyStatus {
    // ASSEMBLY_STATUS_UNKNOWN статус сборки неизвестный
    ASSEMBLY_STATUS_UNSPECIFIED = 0;
    // ASSEMBLY_STATUS_NOT_STARTED статус сборки не начат
    ASSEMBLY_STATUS_NOT_STARTED = 1;
    // ASSEMBLY_STATUS_PENDING статус сборки в процессе
    ASSEMBLY_STATUS_PENDING = 2;
    // ASSEMBLY_STATUS_COMPLETED статус сборки завершен
    ASSEMBLY_STATUS_COMPLETED = 3;
}