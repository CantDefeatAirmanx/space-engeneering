// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/assembly/internal/model/ship_assembly"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShipAssemblyRepository creates a new instance of MockShipAssemblyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShipAssemblyRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockShipAssemblyRepository {
	mock := &MockShipAssemblyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShipAssemblyRepository is an autogenerated mock type for the ShipAssemblyRepository type
type MockShipAssemblyRepository struct {
	mock.Mock
}

type MockShipAssemblyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShipAssemblyRepository) EXPECT() *MockShipAssemblyRepository_Expecter {
	return &MockShipAssemblyRepository_Expecter{mock: &_m.Mock}
}

// CreateShipAssembly provides a mock function for the type MockShipAssemblyRepository
func (_mock *MockShipAssemblyRepository) CreateShipAssembly(ctx context.Context, shipAssembly *model_ship_assembly.ShipAssembly) error {
	ret := _mock.Called(ctx, shipAssembly)

	if len(ret) == 0 {
		panic("no return value specified for CreateShipAssembly")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model_ship_assembly.ShipAssembly) error); ok {
		r0 = returnFunc(ctx, shipAssembly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShipAssemblyRepository_CreateShipAssembly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShipAssembly'
type MockShipAssemblyRepository_CreateShipAssembly_Call struct {
	*mock.Call
}

// CreateShipAssembly is a helper method to define mock.On call
//   - ctx context.Context
//   - shipAssembly *model_ship_assembly.ShipAssembly
func (_e *MockShipAssemblyRepository_Expecter) CreateShipAssembly(ctx, shipAssembly interface{}) *MockShipAssemblyRepository_CreateShipAssembly_Call {
	return &MockShipAssemblyRepository_CreateShipAssembly_Call{Call: _e.mock.On("CreateShipAssembly", ctx, shipAssembly)}
}

func (_c *MockShipAssemblyRepository_CreateShipAssembly_Call) Run(run func(ctx context.Context, shipAssembly *model_ship_assembly.ShipAssembly)) *MockShipAssemblyRepository_CreateShipAssembly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model_ship_assembly.ShipAssembly
		if args[1] != nil {
			arg1 = args[1].(*model_ship_assembly.ShipAssembly)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyRepository_CreateShipAssembly_Call) Return(err error) *MockShipAssemblyRepository_CreateShipAssembly_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShipAssemblyRepository_CreateShipAssembly_Call) RunAndReturn(run func(ctx context.Context, shipAssembly *model_ship_assembly.ShipAssembly) error) *MockShipAssemblyRepository_CreateShipAssembly_Call {
	_c.Call.Return(run)
	return _c
}

// GetShipAssembly provides a mock function for the type MockShipAssemblyRepository
func (_mock *MockShipAssemblyRepository) GetShipAssembly(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error) {
	ret := _mock.Called(ctx, selectParams)

	if len(ret) == 0 {
		panic("no return value specified for GetShipAssembly")
	}

	var r0 *model_ship_assembly.ShipAssembly
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model_ship_assembly.SelectShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error)); ok {
		return returnFunc(ctx, selectParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model_ship_assembly.SelectShipAssemblyParams) *model_ship_assembly.ShipAssembly); ok {
		r0 = returnFunc(ctx, selectParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model_ship_assembly.ShipAssembly)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model_ship_assembly.SelectShipAssemblyParams) error); ok {
		r1 = returnFunc(ctx, selectParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShipAssemblyRepository_GetShipAssembly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShipAssembly'
type MockShipAssemblyRepository_GetShipAssembly_Call struct {
	*mock.Call
}

// GetShipAssembly is a helper method to define mock.On call
//   - ctx context.Context
//   - selectParams model_ship_assembly.SelectShipAssemblyParams
func (_e *MockShipAssemblyRepository_Expecter) GetShipAssembly(ctx, selectParams interface{}) *MockShipAssemblyRepository_GetShipAssembly_Call {
	return &MockShipAssemblyRepository_GetShipAssembly_Call{Call: _e.mock.On("GetShipAssembly", ctx, selectParams)}
}

func (_c *MockShipAssemblyRepository_GetShipAssembly_Call) Run(run func(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams)) *MockShipAssemblyRepository_GetShipAssembly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model_ship_assembly.SelectShipAssemblyParams
		if args[1] != nil {
			arg1 = args[1].(model_ship_assembly.SelectShipAssemblyParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyRepository_GetShipAssembly_Call) Return(shipAssembly *model_ship_assembly.ShipAssembly, err error) *MockShipAssemblyRepository_GetShipAssembly_Call {
	_c.Call.Return(shipAssembly, err)
	return _c
}

func (_c *MockShipAssemblyRepository_GetShipAssembly_Call) RunAndReturn(run func(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error)) *MockShipAssemblyRepository_GetShipAssembly_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShipAssembly provides a mock function for the type MockShipAssemblyRepository
func (_mock *MockShipAssemblyRepository) UpdateShipAssembly(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams, shipAssembly model_ship_assembly.UpdateShipAssemblyFields) error {
	ret := _mock.Called(ctx, selectParams, shipAssembly)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShipAssembly")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model_ship_assembly.SelectShipAssemblyParams, model_ship_assembly.UpdateShipAssemblyFields) error); ok {
		r0 = returnFunc(ctx, selectParams, shipAssembly)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShipAssemblyRepository_UpdateShipAssembly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShipAssembly'
type MockShipAssemblyRepository_UpdateShipAssembly_Call struct {
	*mock.Call
}

// UpdateShipAssembly is a helper method to define mock.On call
//   - ctx context.Context
//   - selectParams model_ship_assembly.SelectShipAssemblyParams
//   - shipAssembly model_ship_assembly.UpdateShipAssemblyFields
func (_e *MockShipAssemblyRepository_Expecter) UpdateShipAssembly(ctx, selectParams, shipAssembly interface{}) *MockShipAssemblyRepository_UpdateShipAssembly_Call {
	return &MockShipAssemblyRepository_UpdateShipAssembly_Call{Call: _e.mock.On("UpdateShipAssembly", ctx, selectParams, shipAssembly)}
}

func (_c *MockShipAssemblyRepository_UpdateShipAssembly_Call) Run(run func(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams, shipAssembly model_ship_assembly.UpdateShipAssemblyFields)) *MockShipAssemblyRepository_UpdateShipAssembly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model_ship_assembly.SelectShipAssemblyParams
		if args[1] != nil {
			arg1 = args[1].(model_ship_assembly.SelectShipAssemblyParams)
		}
		var arg2 model_ship_assembly.UpdateShipAssemblyFields
		if args[2] != nil {
			arg2 = args[2].(model_ship_assembly.UpdateShipAssemblyFields)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockShipAssemblyRepository_UpdateShipAssembly_Call) Return(err error) *MockShipAssemblyRepository_UpdateShipAssembly_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShipAssemblyRepository_UpdateShipAssembly_Call) RunAndReturn(run func(ctx context.Context, selectParams model_ship_assembly.SelectShipAssemblyParams, shipAssembly model_ship_assembly.UpdateShipAssemblyFields) error) *MockShipAssemblyRepository_UpdateShipAssembly_Call {
	_c.Call.Return(run)
	return _c
}
