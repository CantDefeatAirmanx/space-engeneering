// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Code generated for CantDefeatAirmanx service
// Â© CantDefeatAirmanx 2025.

package mocks

import (
	"context"

	"github.com/CantDefeatAirmanx/space-engeneering/assembly/internal/model/ship_assembly"
	"github.com/CantDefeatAirmanx/space-engeneering/assembly/internal/service/ship_assembly"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShipAssemblyService creates a new instance of MockShipAssemblyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShipAssemblyService(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockShipAssemblyService {
	mock := &MockShipAssemblyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShipAssemblyService is an autogenerated mock type for the ShipAssemblyService type
type MockShipAssemblyService struct {
	mock.Mock
}

type MockShipAssemblyService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShipAssemblyService) EXPECT() *MockShipAssemblyService_Expecter {
	return &MockShipAssemblyService_Expecter{mock: &_m.Mock}
}

// AssemblyCompleted provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) AssemblyCompleted(ctx context.Context, params service_ship_assembly.AssemblyCompletedParams) (*service_ship_assembly.AssemblyCompletedReturn, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AssemblyCompleted")
	}

	var r0 *service_ship_assembly.AssemblyCompletedReturn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.AssemblyCompletedParams) (*service_ship_assembly.AssemblyCompletedReturn, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.AssemblyCompletedParams) *service_ship_assembly.AssemblyCompletedReturn); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_ship_assembly.AssemblyCompletedReturn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_ship_assembly.AssemblyCompletedParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShipAssemblyService_AssemblyCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssemblyCompleted'
type MockShipAssemblyService_AssemblyCompleted_Call struct {
	*mock.Call
}

// AssemblyCompleted is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_ship_assembly.AssemblyCompletedParams
func (_e *MockShipAssemblyService_Expecter) AssemblyCompleted(ctx, params interface{}) *MockShipAssemblyService_AssemblyCompleted_Call {
	return &MockShipAssemblyService_AssemblyCompleted_Call{Call: _e.mock.On("AssemblyCompleted", ctx, params)}
}

func (_c *MockShipAssemblyService_AssemblyCompleted_Call) Run(run func(ctx context.Context, params service_ship_assembly.AssemblyCompletedParams)) *MockShipAssemblyService_AssemblyCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_ship_assembly.AssemblyCompletedParams
		if args[1] != nil {
			arg1 = args[1].(service_ship_assembly.AssemblyCompletedParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyService_AssemblyCompleted_Call) Return(assemblyCompletedReturn *service_ship_assembly.AssemblyCompletedReturn, err error) *MockShipAssemblyService_AssemblyCompleted_Call {
	_c.Call.Return(assemblyCompletedReturn, err)
	return _c
}

func (_c *MockShipAssemblyService_AssemblyCompleted_Call) RunAndReturn(run func(ctx context.Context, params service_ship_assembly.AssemblyCompletedParams) (*service_ship_assembly.AssemblyCompletedReturn, error)) *MockShipAssemblyService_AssemblyCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// AssemblyStarted provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) AssemblyStarted(ctx context.Context, params service_ship_assembly.AssemblyStartedParams) (*service_ship_assembly.AssemblyStartedReturn, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AssemblyStarted")
	}

	var r0 *service_ship_assembly.AssemblyStartedReturn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.AssemblyStartedParams) (*service_ship_assembly.AssemblyStartedReturn, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.AssemblyStartedParams) *service_ship_assembly.AssemblyStartedReturn); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_ship_assembly.AssemblyStartedReturn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_ship_assembly.AssemblyStartedParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShipAssemblyService_AssemblyStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssemblyStarted'
type MockShipAssemblyService_AssemblyStarted_Call struct {
	*mock.Call
}

// AssemblyStarted is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_ship_assembly.AssemblyStartedParams
func (_e *MockShipAssemblyService_Expecter) AssemblyStarted(ctx, params interface{}) *MockShipAssemblyService_AssemblyStarted_Call {
	return &MockShipAssemblyService_AssemblyStarted_Call{Call: _e.mock.On("AssemblyStarted", ctx, params)}
}

func (_c *MockShipAssemblyService_AssemblyStarted_Call) Run(run func(ctx context.Context, params service_ship_assembly.AssemblyStartedParams)) *MockShipAssemblyService_AssemblyStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_ship_assembly.AssemblyStartedParams
		if args[1] != nil {
			arg1 = args[1].(service_ship_assembly.AssemblyStartedParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyService_AssemblyStarted_Call) Return(assemblyStartedReturn *service_ship_assembly.AssemblyStartedReturn, err error) *MockShipAssemblyService_AssemblyStarted_Call {
	_c.Call.Return(assemblyStartedReturn, err)
	return _c
}

func (_c *MockShipAssemblyService_AssemblyStarted_Call) RunAndReturn(run func(ctx context.Context, params service_ship_assembly.AssemblyStartedParams) (*service_ship_assembly.AssemblyStartedReturn, error)) *MockShipAssemblyService_AssemblyStarted_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShipAssemblyService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockShipAssemblyService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockShipAssemblyService_Expecter) Close() *MockShipAssemblyService_Close_Call {
	return &MockShipAssemblyService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockShipAssemblyService_Close_Call) Run(run func()) *MockShipAssemblyService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShipAssemblyService_Close_Call) Return(err error) *MockShipAssemblyService_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShipAssemblyService_Close_Call) RunAndReturn(run func() error) *MockShipAssemblyService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShipAssembly provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) CreateShipAssembly(ctx context.Context, params service_ship_assembly.CreateShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateShipAssembly")
	}

	var r0 *model_ship_assembly.ShipAssembly
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.CreateShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.CreateShipAssemblyParams) *model_ship_assembly.ShipAssembly); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model_ship_assembly.ShipAssembly)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_ship_assembly.CreateShipAssemblyParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShipAssemblyService_CreateShipAssembly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShipAssembly'
type MockShipAssemblyService_CreateShipAssembly_Call struct {
	*mock.Call
}

// CreateShipAssembly is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_ship_assembly.CreateShipAssemblyParams
func (_e *MockShipAssemblyService_Expecter) CreateShipAssembly(ctx, params interface{}) *MockShipAssemblyService_CreateShipAssembly_Call {
	return &MockShipAssemblyService_CreateShipAssembly_Call{Call: _e.mock.On("CreateShipAssembly", ctx, params)}
}

func (_c *MockShipAssemblyService_CreateShipAssembly_Call) Run(run func(ctx context.Context, params service_ship_assembly.CreateShipAssemblyParams)) *MockShipAssemblyService_CreateShipAssembly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_ship_assembly.CreateShipAssemblyParams
		if args[1] != nil {
			arg1 = args[1].(service_ship_assembly.CreateShipAssemblyParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyService_CreateShipAssembly_Call) Return(shipAssembly *model_ship_assembly.ShipAssembly, err error) *MockShipAssemblyService_CreateShipAssembly_Call {
	_c.Call.Return(shipAssembly, err)
	return _c
}

func (_c *MockShipAssemblyService_CreateShipAssembly_Call) RunAndReturn(run func(ctx context.Context, params service_ship_assembly.CreateShipAssemblyParams) (*model_ship_assembly.ShipAssembly, error)) *MockShipAssemblyService_CreateShipAssembly_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssemblyInfo provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) GetAssemblyInfo(ctx context.Context, params service_ship_assembly.GetAssemblyInfoParams) (*model_ship_assembly.ShipAssembly, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAssemblyInfo")
	}

	var r0 *model_ship_assembly.ShipAssembly
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.GetAssemblyInfoParams) (*model_ship_assembly.ShipAssembly, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, service_ship_assembly.GetAssemblyInfoParams) *model_ship_assembly.ShipAssembly); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model_ship_assembly.ShipAssembly)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, service_ship_assembly.GetAssemblyInfoParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShipAssemblyService_GetAssemblyInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssemblyInfo'
type MockShipAssemblyService_GetAssemblyInfo_Call struct {
	*mock.Call
}

// GetAssemblyInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - params service_ship_assembly.GetAssemblyInfoParams
func (_e *MockShipAssemblyService_Expecter) GetAssemblyInfo(ctx, params interface{}) *MockShipAssemblyService_GetAssemblyInfo_Call {
	return &MockShipAssemblyService_GetAssemblyInfo_Call{Call: _e.mock.On("GetAssemblyInfo", ctx, params)}
}

func (_c *MockShipAssemblyService_GetAssemblyInfo_Call) Run(run func(ctx context.Context, params service_ship_assembly.GetAssemblyInfoParams)) *MockShipAssemblyService_GetAssemblyInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 service_ship_assembly.GetAssemblyInfoParams
		if args[1] != nil {
			arg1 = args[1].(service_ship_assembly.GetAssemblyInfoParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockShipAssemblyService_GetAssemblyInfo_Call) Return(shipAssembly *model_ship_assembly.ShipAssembly, err error) *MockShipAssemblyService_GetAssemblyInfo_Call {
	_c.Call.Return(shipAssembly, err)
	return _c
}

func (_c *MockShipAssemblyService_GetAssemblyInfo_Call) RunAndReturn(run func(ctx context.Context, params service_ship_assembly.GetAssemblyInfoParams) (*model_ship_assembly.ShipAssembly, error)) *MockShipAssemblyService_GetAssemblyInfo_Call {
	_c.Call.Return(run)
	return _c
}

// watchOrderPaidEvent provides a mock function for the type MockShipAssemblyService
func (_mock *MockShipAssemblyService) watchOrderPaidEvent(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockShipAssemblyService_watchOrderPaidEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'watchOrderPaidEvent'
type MockShipAssemblyService_watchOrderPaidEvent_Call struct {
	*mock.Call
}

// watchOrderPaidEvent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockShipAssemblyService_Expecter) watchOrderPaidEvent(ctx interface{}) *MockShipAssemblyService_watchOrderPaidEvent_Call {
	return &MockShipAssemblyService_watchOrderPaidEvent_Call{Call: _e.mock.On("watchOrderPaidEvent", ctx)}
}

func (_c *MockShipAssemblyService_watchOrderPaidEvent_Call) Run(run func(ctx context.Context)) *MockShipAssemblyService_watchOrderPaidEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShipAssemblyService_watchOrderPaidEvent_Call) Return() *MockShipAssemblyService_watchOrderPaidEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShipAssemblyService_watchOrderPaidEvent_Call) RunAndReturn(run func(ctx context.Context)) *MockShipAssemblyService_watchOrderPaidEvent_Call {
	_c.Run(run)
	return _c
}
